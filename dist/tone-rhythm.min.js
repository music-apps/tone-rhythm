(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["toneRhythm"] = factory();
	else
		root["toneRhythm"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/tone-rhythm.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/tone-rhythm.js":
/*!****************************!*\
  !*** ./src/tone-rhythm.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar _require = __webpack_require__(/*! ./utils */ \"./src/utils.js\"),\n    validateDeps = _require.validateDeps;\n/*\n!!! tone-rhythm 1.0.0\n!!! https://github.com/scraggo/tone-rhythm\n*/\n\n/**\n * Factory to get tone-rhythm methods\n *\n * BREAKING CHANGE IN v1.0.0 - Tone is now a true \"peer dependency\" and needs to be included here.:\n * @param {Object} ToneTime - import of Tone.Time. example: const ToneTime = require('tone/Tone/type/Time');\n * @returns {Object} - tone-rhythm methods {\n    getBarsBeats,\n    addTimes,\n    getTransportTimes,\n    mergeMusicDataPart\n  }\n */\n\n\nvar toneRhythm = function toneRhythm(ToneTime) {\n  // CONSTANTS\n  var roundMeToZero = new Set(['001', '002', '003', '004']);\n  var VALID_TYPES = {\n    getBarsBeats: new Set(['string', 'number'])\n  };\n  /**\n   * @param {string|number} value - a rhythm value Tone recognizes\n   * @return {string} - rhythm value converted to Tone's bars/beats format.\n   * @example getBarsBeats('4n') -> '0:1:0'\n   */\n\n  var getBarsBeats = function getBarsBeats(value) {\n    validateDeps(ToneTime);\n\n    if (!VALID_TYPES.getBarsBeats.has(_typeof(value))) {\n      throw TypeError(\"Expected type string or type number for value. Got: \".concat(value));\n    }\n\n    var converted = ToneTime(value).toBarsBeatsSixteenths();\n\n    var _converted$split = converted.split('.'),\n        _converted$split2 = _slicedToArray(_converted$split, 2),\n        prefix = _converted$split2[0],\n        decimal = _converted$split2[1];\n\n    if (roundMeToZero.has(decimal)) {\n      return prefix;\n    }\n\n    return converted;\n  };\n  /**\n   * @param {string[]|string} item\n   * if item is array, return summation of items in Tone's bars/beats format.\n   *    Note: The first item of the array may be 'r' (rest)\n   * @return {string} - if item is an array, returns\n   * rhythm value converted to Tone's bars/beats format.\n   * If item was a string, it gets returned as is.\n   * @example addTimes('4n.') -> '4n.'\n   * @example addTimes(['8n', '4t', '4t', '4t', '4t', '4t', '4t', '8n']) -> '1:1:0'\n   */\n\n\n  var addTimes = function addTimes(item) {\n    if (!Array.isArray(item)) return item;\n    if (item[0] === 'r') item = item.slice(1);\n    return item.reduce(function (acc, cur) {\n      return getBarsBeats(ToneTime(acc) + ToneTime(cur));\n    });\n  };\n  /**\n   * Given an array of durations (see API), return transport times.\n   * see [README.md](README.md) for examples\n   * @param {string[]} arrOfDurations - see README.md API\n   * @param {number|string} [startTime=0] - a start time in Tone's Time format.\n   * @return {Array} of start times in Tone's bars/beats format.\n   */\n\n\n  var getTransportTimes = function getTransportTimes(arrOfDurations) {\n    var startTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var accumulator = startTime;\n    var timesAccumulated = [accumulator];\n    arrOfDurations.forEach(function (time) {\n      if (Array.isArray(time)) {\n        accumulator = addTimes(_toConsumableArray(time).concat([accumulator]));\n\n        if (time[0] === 'r') {\n          var lastIdx = timesAccumulated.length - 1;\n          timesAccumulated[lastIdx] = accumulator;\n        } else {\n          timesAccumulated.push(accumulator);\n        }\n      } else {\n        accumulator = addTimes([time, accumulator]);\n        timesAccumulated.push(accumulator);\n      }\n    });\n    return timesAccumulated.slice(0, -1);\n  };\n  /**\n   * see [README.md](README.md) for examples and return values.\n   * @param {Object} config (see properties below)\n   * @param {Array} config.rhythms - see API\n   * @param {string[]} [config.notes] - ex: ['C4', 'D4', 'E4']\n   * @param {Array} [config.times] - see return of `getTransportTimes`\n   * @param {string|number} [config.startTime] - see startTime of `getTransportTimes`\n   * @return {Array} of objects for consumption by Tone.Part.\n   * Object properties always include `time` (number|string), array index `idx` (number - integer) and `duration` (string). May also include `notes` and `velocities`. (see readme)\n   */\n\n\n  var mergeMusicDataPart = function mergeMusicDataPart(config) {\n    var notes = config.notes,\n        rhythms = config.rhythms,\n        velocities = config.velocities,\n        startTime = config.startTime;\n    var times = config.times;\n\n    if (!rhythms || !Array.isArray(rhythms)) {\n      throw TypeError('Expected \"rhythms\" property of type \"Array\"');\n    }\n\n    if (!times) {\n      times = getTransportTimes(rhythms, startTime);\n    }\n\n    return rhythms.map(function (rhythm, idx) {\n      var musicData = {\n        duration: addTimes(rhythm),\n        idx: idx,\n        time: times[idx]\n      };\n      if (notes) musicData.note = notes[idx];\n      if (velocities) musicData.velocity = velocities[idx];\n      return musicData;\n    });\n  };\n\n  return {\n    getBarsBeats: getBarsBeats,\n    addTimes: addTimes,\n    getTransportTimes: getTransportTimes,\n    mergeMusicDataPart: mergeMusicDataPart\n  };\n};\n\nmodule.exports = toneRhythm;\n\n//# sourceURL=webpack://toneRhythm/./src/tone-rhythm.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var getHelp = function getHelp(errNum) {\n  return \"See https://github.com/scraggo/tone-rhythm ERROR_CODE_\".concat(errNum, \" for more information.\");\n}; // Handle ToneTime dependency errors\n\n\nvar validateDeps = function validateDeps(ToneTime) {\n  if (!ToneTime || typeof ToneTime !== 'function') {\n    throw new Error(\"Tone.Time must be passed in as a dependency.\\n\".concat(getHelp(0)));\n  }\n\n  if (typeof ToneTime().toBarsBeatsSixteenths !== 'function') {\n    throw new Error(\"Tone.Time dependency has invalid or unexpected API.\\n\".concat(getHelp(1)));\n  }\n};\n\nmodule.exports = {\n  validateDeps: validateDeps\n};\n\n//# sourceURL=webpack://toneRhythm/./src/utils.js?");

/***/ })

/******/ });
});